-- Compiled with roblox-ts v2.1.0
local TS = require(game:GetService("ReplicatedStorage"):WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
-- / <reference types="@rbxts/testez/globals" />
local RIterator = TS.import(script, game:GetService("ReplicatedStorage"), "TS", "riterator").default
local Some = TS.import(script, game:GetService("ReplicatedStorage"), "TS", "option").Some
return function()
	describe("RIterator", function()
		it("should have the nth, property working fine", function()
			local x = RIterator:from({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })
			expect(x:nth(0)).to.equal(Some(1))
			expect(x:nth(4)).to.equal(Some(5))
			expect(x:nth(9)).to.equal(Some(10))
		end)
		it("should take slices", function()
			local x = RIterator:from({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })
			local first5 = x:take(5):unwrap()
			expect(first5:nth(0)).to.equal(Some(1))
			expect(first5:nth(4)).to.equal(Some(5))
		end)
		it("should peek... properly", function()
			local x = RIterator:from({ "a", "b", "c", "d", "e", "f", "g" })
			local also_a = x:peek()
			local a = x:next()
			local also_b = x:peek()
			local b = x:next()
			expect(a).to.equal(Some("a"))
			expect(also_a).to.equal(Some("a"))
			expect(b).to.equal(Some("b"))
			expect(also_b).to.equal(Some("b"))
		end)
		it("should allow for negative indices for nth", function()
			local x = RIterator:from({ "a", "b", "c", "d", "e", "f", "g" })
			expect(x:nth(-1)).to.equal(Some("g"))
			expect(x:nth(-2)).to.equal(Some("f"))
		end)
		it("should be able to partition", function()
			local x = RIterator:from({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })
			expect(x:partition(function(e)
				return e % 2 == 0
			end)[1]).to.equal({ 2, 4, 6, 8, 10 })
			expect(x:partition(function(e)
				return e % 2 ~= 0
			end)[1]).to.equal({ 1, 3, 5, 7, 9 })
		end)
	end)
end
